// This file is part of olympus-xmp. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/olympus-xmp/master/COPYRIGHT. No part of olympus-xmp, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2022 The developers of olympus-xmp. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/olympus-xmp/master/COPYRIGHT.


#[derive(Default, Debug, Clone, Ord, PartialOrd, Eq, PartialEq, Hash)]
struct LanguageRecord
{
	primary_language_subtag: Option<String>,
	
	suppress_script: Option<[u8; 4]>,
	
	macrolanguage: Option<String>,
	
	scope: Scope,
}

impl ParseRecord for LanguageRecord
{
	type Key = LanguageSubtag;
	
	#[inline(always)]
	fn parse_key_range(inclusive_from: &str, inclusive_to: &str) -> Result<&'static [Self::Key], TagOrSubtagRangeError>
	{
		use LanguageSubtag::ThreeLowerCaseAlpha;
		
		static PrivateUseRange: [LanguageSubtag; 520] =
		[
			ThreeLowerCaseAlpha([b'q', b'a', b'a']),
			ThreeLowerCaseAlpha([b'q', b'a', b'b']),
			ThreeLowerCaseAlpha([b'q', b'a', b'c']),
			ThreeLowerCaseAlpha([b'q', b'a', b'd']),
			ThreeLowerCaseAlpha([b'q', b'a', b'e']),
			ThreeLowerCaseAlpha([b'q', b'a', b'f']),
			ThreeLowerCaseAlpha([b'q', b'a', b'g']),
			ThreeLowerCaseAlpha([b'q', b'a', b'h']),
			ThreeLowerCaseAlpha([b'q', b'a', b'i']),
			ThreeLowerCaseAlpha([b'q', b'a', b'j']),
			ThreeLowerCaseAlpha([b'q', b'a', b'k']),
			ThreeLowerCaseAlpha([b'q', b'a', b'l']),
			ThreeLowerCaseAlpha([b'q', b'a', b'm']),
			ThreeLowerCaseAlpha([b'q', b'a', b'n']),
			ThreeLowerCaseAlpha([b'q', b'a', b'o']),
			ThreeLowerCaseAlpha([b'q', b'a', b'p']),
			ThreeLowerCaseAlpha([b'q', b'a', b'q']),
			ThreeLowerCaseAlpha([b'q', b'a', b'r']),
			ThreeLowerCaseAlpha([b'q', b'a', b's']),
			ThreeLowerCaseAlpha([b'q', b'a', b't']),
			ThreeLowerCaseAlpha([b'q', b'a', b'u']),
			ThreeLowerCaseAlpha([b'q', b'a', b'v']),
			ThreeLowerCaseAlpha([b'q', b'a', b'w']),
			ThreeLowerCaseAlpha([b'q', b'a', b'x']),
			ThreeLowerCaseAlpha([b'q', b'a', b'y']),
			ThreeLowerCaseAlpha([b'q', b'a', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'b', b'a']),
			ThreeLowerCaseAlpha([b'q', b'b', b'b']),
			ThreeLowerCaseAlpha([b'q', b'b', b'c']),
			ThreeLowerCaseAlpha([b'q', b'b', b'd']),
			ThreeLowerCaseAlpha([b'q', b'b', b'e']),
			ThreeLowerCaseAlpha([b'q', b'b', b'f']),
			ThreeLowerCaseAlpha([b'q', b'b', b'g']),
			ThreeLowerCaseAlpha([b'q', b'b', b'h']),
			ThreeLowerCaseAlpha([b'q', b'b', b'i']),
			ThreeLowerCaseAlpha([b'q', b'b', b'j']),
			ThreeLowerCaseAlpha([b'q', b'b', b'k']),
			ThreeLowerCaseAlpha([b'q', b'b', b'l']),
			ThreeLowerCaseAlpha([b'q', b'b', b'm']),
			ThreeLowerCaseAlpha([b'q', b'b', b'n']),
			ThreeLowerCaseAlpha([b'q', b'b', b'o']),
			ThreeLowerCaseAlpha([b'q', b'b', b'p']),
			ThreeLowerCaseAlpha([b'q', b'b', b'q']),
			ThreeLowerCaseAlpha([b'q', b'b', b'r']),
			ThreeLowerCaseAlpha([b'q', b'b', b's']),
			ThreeLowerCaseAlpha([b'q', b'b', b't']),
			ThreeLowerCaseAlpha([b'q', b'b', b'u']),
			ThreeLowerCaseAlpha([b'q', b'b', b'v']),
			ThreeLowerCaseAlpha([b'q', b'b', b'w']),
			ThreeLowerCaseAlpha([b'q', b'b', b'x']),
			ThreeLowerCaseAlpha([b'q', b'b', b'y']),
			ThreeLowerCaseAlpha([b'q', b'b', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'c', b'a']),
			ThreeLowerCaseAlpha([b'q', b'c', b'b']),
			ThreeLowerCaseAlpha([b'q', b'c', b'c']),
			ThreeLowerCaseAlpha([b'q', b'c', b'd']),
			ThreeLowerCaseAlpha([b'q', b'c', b'e']),
			ThreeLowerCaseAlpha([b'q', b'c', b'f']),
			ThreeLowerCaseAlpha([b'q', b'c', b'g']),
			ThreeLowerCaseAlpha([b'q', b'c', b'h']),
			ThreeLowerCaseAlpha([b'q', b'c', b'i']),
			ThreeLowerCaseAlpha([b'q', b'c', b'j']),
			ThreeLowerCaseAlpha([b'q', b'c', b'k']),
			ThreeLowerCaseAlpha([b'q', b'c', b'l']),
			ThreeLowerCaseAlpha([b'q', b'c', b'm']),
			ThreeLowerCaseAlpha([b'q', b'c', b'n']),
			ThreeLowerCaseAlpha([b'q', b'c', b'o']),
			ThreeLowerCaseAlpha([b'q', b'c', b'p']),
			ThreeLowerCaseAlpha([b'q', b'c', b'q']),
			ThreeLowerCaseAlpha([b'q', b'c', b'r']),
			ThreeLowerCaseAlpha([b'q', b'c', b's']),
			ThreeLowerCaseAlpha([b'q', b'c', b't']),
			ThreeLowerCaseAlpha([b'q', b'c', b'u']),
			ThreeLowerCaseAlpha([b'q', b'c', b'v']),
			ThreeLowerCaseAlpha([b'q', b'c', b'w']),
			ThreeLowerCaseAlpha([b'q', b'c', b'x']),
			ThreeLowerCaseAlpha([b'q', b'c', b'y']),
			ThreeLowerCaseAlpha([b'q', b'c', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'd', b'a']),
			ThreeLowerCaseAlpha([b'q', b'd', b'b']),
			ThreeLowerCaseAlpha([b'q', b'd', b'c']),
			ThreeLowerCaseAlpha([b'q', b'd', b'd']),
			ThreeLowerCaseAlpha([b'q', b'd', b'e']),
			ThreeLowerCaseAlpha([b'q', b'd', b'f']),
			ThreeLowerCaseAlpha([b'q', b'd', b'g']),
			ThreeLowerCaseAlpha([b'q', b'd', b'h']),
			ThreeLowerCaseAlpha([b'q', b'd', b'i']),
			ThreeLowerCaseAlpha([b'q', b'd', b'j']),
			ThreeLowerCaseAlpha([b'q', b'd', b'k']),
			ThreeLowerCaseAlpha([b'q', b'd', b'l']),
			ThreeLowerCaseAlpha([b'q', b'd', b'm']),
			ThreeLowerCaseAlpha([b'q', b'd', b'n']),
			ThreeLowerCaseAlpha([b'q', b'd', b'o']),
			ThreeLowerCaseAlpha([b'q', b'd', b'p']),
			ThreeLowerCaseAlpha([b'q', b'd', b'q']),
			ThreeLowerCaseAlpha([b'q', b'd', b'r']),
			ThreeLowerCaseAlpha([b'q', b'd', b's']),
			ThreeLowerCaseAlpha([b'q', b'd', b't']),
			ThreeLowerCaseAlpha([b'q', b'd', b'u']),
			ThreeLowerCaseAlpha([b'q', b'd', b'v']),
			ThreeLowerCaseAlpha([b'q', b'd', b'w']),
			ThreeLowerCaseAlpha([b'q', b'd', b'x']),
			ThreeLowerCaseAlpha([b'q', b'd', b'y']),
			ThreeLowerCaseAlpha([b'q', b'd', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'e', b'a']),
			ThreeLowerCaseAlpha([b'q', b'e', b'b']),
			ThreeLowerCaseAlpha([b'q', b'e', b'c']),
			ThreeLowerCaseAlpha([b'q', b'e', b'd']),
			ThreeLowerCaseAlpha([b'q', b'e', b'e']),
			ThreeLowerCaseAlpha([b'q', b'e', b'f']),
			ThreeLowerCaseAlpha([b'q', b'e', b'g']),
			ThreeLowerCaseAlpha([b'q', b'e', b'h']),
			ThreeLowerCaseAlpha([b'q', b'e', b'i']),
			ThreeLowerCaseAlpha([b'q', b'e', b'j']),
			ThreeLowerCaseAlpha([b'q', b'e', b'k']),
			ThreeLowerCaseAlpha([b'q', b'e', b'l']),
			ThreeLowerCaseAlpha([b'q', b'e', b'm']),
			ThreeLowerCaseAlpha([b'q', b'e', b'n']),
			ThreeLowerCaseAlpha([b'q', b'e', b'o']),
			ThreeLowerCaseAlpha([b'q', b'e', b'p']),
			ThreeLowerCaseAlpha([b'q', b'e', b'q']),
			ThreeLowerCaseAlpha([b'q', b'e', b'r']),
			ThreeLowerCaseAlpha([b'q', b'e', b's']),
			ThreeLowerCaseAlpha([b'q', b'e', b't']),
			ThreeLowerCaseAlpha([b'q', b'e', b'u']),
			ThreeLowerCaseAlpha([b'q', b'e', b'v']),
			ThreeLowerCaseAlpha([b'q', b'e', b'w']),
			ThreeLowerCaseAlpha([b'q', b'e', b'x']),
			ThreeLowerCaseAlpha([b'q', b'e', b'y']),
			ThreeLowerCaseAlpha([b'q', b'e', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'f', b'a']),
			ThreeLowerCaseAlpha([b'q', b'f', b'b']),
			ThreeLowerCaseAlpha([b'q', b'f', b'c']),
			ThreeLowerCaseAlpha([b'q', b'f', b'd']),
			ThreeLowerCaseAlpha([b'q', b'f', b'e']),
			ThreeLowerCaseAlpha([b'q', b'f', b'f']),
			ThreeLowerCaseAlpha([b'q', b'f', b'g']),
			ThreeLowerCaseAlpha([b'q', b'f', b'h']),
			ThreeLowerCaseAlpha([b'q', b'f', b'i']),
			ThreeLowerCaseAlpha([b'q', b'f', b'j']),
			ThreeLowerCaseAlpha([b'q', b'f', b'k']),
			ThreeLowerCaseAlpha([b'q', b'f', b'l']),
			ThreeLowerCaseAlpha([b'q', b'f', b'm']),
			ThreeLowerCaseAlpha([b'q', b'f', b'n']),
			ThreeLowerCaseAlpha([b'q', b'f', b'o']),
			ThreeLowerCaseAlpha([b'q', b'f', b'p']),
			ThreeLowerCaseAlpha([b'q', b'f', b'q']),
			ThreeLowerCaseAlpha([b'q', b'f', b'r']),
			ThreeLowerCaseAlpha([b'q', b'f', b's']),
			ThreeLowerCaseAlpha([b'q', b'f', b't']),
			ThreeLowerCaseAlpha([b'q', b'f', b'u']),
			ThreeLowerCaseAlpha([b'q', b'f', b'v']),
			ThreeLowerCaseAlpha([b'q', b'f', b'w']),
			ThreeLowerCaseAlpha([b'q', b'f', b'x']),
			ThreeLowerCaseAlpha([b'q', b'f', b'y']),
			ThreeLowerCaseAlpha([b'q', b'f', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'g', b'a']),
			ThreeLowerCaseAlpha([b'q', b'g', b'b']),
			ThreeLowerCaseAlpha([b'q', b'g', b'c']),
			ThreeLowerCaseAlpha([b'q', b'g', b'd']),
			ThreeLowerCaseAlpha([b'q', b'g', b'e']),
			ThreeLowerCaseAlpha([b'q', b'g', b'f']),
			ThreeLowerCaseAlpha([b'q', b'g', b'g']),
			ThreeLowerCaseAlpha([b'q', b'g', b'h']),
			ThreeLowerCaseAlpha([b'q', b'g', b'i']),
			ThreeLowerCaseAlpha([b'q', b'g', b'j']),
			ThreeLowerCaseAlpha([b'q', b'g', b'k']),
			ThreeLowerCaseAlpha([b'q', b'g', b'l']),
			ThreeLowerCaseAlpha([b'q', b'g', b'm']),
			ThreeLowerCaseAlpha([b'q', b'g', b'n']),
			ThreeLowerCaseAlpha([b'q', b'g', b'o']),
			ThreeLowerCaseAlpha([b'q', b'g', b'p']),
			ThreeLowerCaseAlpha([b'q', b'g', b'q']),
			ThreeLowerCaseAlpha([b'q', b'g', b'r']),
			ThreeLowerCaseAlpha([b'q', b'g', b's']),
			ThreeLowerCaseAlpha([b'q', b'g', b't']),
			ThreeLowerCaseAlpha([b'q', b'g', b'u']),
			ThreeLowerCaseAlpha([b'q', b'g', b'v']),
			ThreeLowerCaseAlpha([b'q', b'g', b'w']),
			ThreeLowerCaseAlpha([b'q', b'g', b'x']),
			ThreeLowerCaseAlpha([b'q', b'g', b'y']),
			ThreeLowerCaseAlpha([b'q', b'g', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'h', b'a']),
			ThreeLowerCaseAlpha([b'q', b'h', b'b']),
			ThreeLowerCaseAlpha([b'q', b'h', b'c']),
			ThreeLowerCaseAlpha([b'q', b'h', b'd']),
			ThreeLowerCaseAlpha([b'q', b'h', b'e']),
			ThreeLowerCaseAlpha([b'q', b'h', b'f']),
			ThreeLowerCaseAlpha([b'q', b'h', b'g']),
			ThreeLowerCaseAlpha([b'q', b'h', b'h']),
			ThreeLowerCaseAlpha([b'q', b'h', b'i']),
			ThreeLowerCaseAlpha([b'q', b'h', b'j']),
			ThreeLowerCaseAlpha([b'q', b'h', b'k']),
			ThreeLowerCaseAlpha([b'q', b'h', b'l']),
			ThreeLowerCaseAlpha([b'q', b'h', b'm']),
			ThreeLowerCaseAlpha([b'q', b'h', b'n']),
			ThreeLowerCaseAlpha([b'q', b'h', b'o']),
			ThreeLowerCaseAlpha([b'q', b'h', b'p']),
			ThreeLowerCaseAlpha([b'q', b'h', b'q']),
			ThreeLowerCaseAlpha([b'q', b'h', b'r']),
			ThreeLowerCaseAlpha([b'q', b'h', b's']),
			ThreeLowerCaseAlpha([b'q', b'h', b't']),
			ThreeLowerCaseAlpha([b'q', b'h', b'u']),
			ThreeLowerCaseAlpha([b'q', b'h', b'v']),
			ThreeLowerCaseAlpha([b'q', b'h', b'w']),
			ThreeLowerCaseAlpha([b'q', b'h', b'x']),
			ThreeLowerCaseAlpha([b'q', b'h', b'y']),
			ThreeLowerCaseAlpha([b'q', b'h', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'i', b'a']),
			ThreeLowerCaseAlpha([b'q', b'i', b'b']),
			ThreeLowerCaseAlpha([b'q', b'i', b'c']),
			ThreeLowerCaseAlpha([b'q', b'i', b'd']),
			ThreeLowerCaseAlpha([b'q', b'i', b'e']),
			ThreeLowerCaseAlpha([b'q', b'i', b'f']),
			ThreeLowerCaseAlpha([b'q', b'i', b'g']),
			ThreeLowerCaseAlpha([b'q', b'i', b'h']),
			ThreeLowerCaseAlpha([b'q', b'i', b'i']),
			ThreeLowerCaseAlpha([b'q', b'i', b'j']),
			ThreeLowerCaseAlpha([b'q', b'i', b'k']),
			ThreeLowerCaseAlpha([b'q', b'i', b'l']),
			ThreeLowerCaseAlpha([b'q', b'i', b'm']),
			ThreeLowerCaseAlpha([b'q', b'i', b'n']),
			ThreeLowerCaseAlpha([b'q', b'i', b'o']),
			ThreeLowerCaseAlpha([b'q', b'i', b'p']),
			ThreeLowerCaseAlpha([b'q', b'i', b'q']),
			ThreeLowerCaseAlpha([b'q', b'i', b'r']),
			ThreeLowerCaseAlpha([b'q', b'i', b's']),
			ThreeLowerCaseAlpha([b'q', b'i', b't']),
			ThreeLowerCaseAlpha([b'q', b'i', b'u']),
			ThreeLowerCaseAlpha([b'q', b'i', b'v']),
			ThreeLowerCaseAlpha([b'q', b'i', b'w']),
			ThreeLowerCaseAlpha([b'q', b'i', b'x']),
			ThreeLowerCaseAlpha([b'q', b'i', b'y']),
			ThreeLowerCaseAlpha([b'q', b'i', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'j', b'a']),
			ThreeLowerCaseAlpha([b'q', b'j', b'b']),
			ThreeLowerCaseAlpha([b'q', b'j', b'c']),
			ThreeLowerCaseAlpha([b'q', b'j', b'd']),
			ThreeLowerCaseAlpha([b'q', b'j', b'e']),
			ThreeLowerCaseAlpha([b'q', b'j', b'f']),
			ThreeLowerCaseAlpha([b'q', b'j', b'g']),
			ThreeLowerCaseAlpha([b'q', b'j', b'h']),
			ThreeLowerCaseAlpha([b'q', b'j', b'i']),
			ThreeLowerCaseAlpha([b'q', b'j', b'j']),
			ThreeLowerCaseAlpha([b'q', b'j', b'k']),
			ThreeLowerCaseAlpha([b'q', b'j', b'l']),
			ThreeLowerCaseAlpha([b'q', b'j', b'm']),
			ThreeLowerCaseAlpha([b'q', b'j', b'n']),
			ThreeLowerCaseAlpha([b'q', b'j', b'o']),
			ThreeLowerCaseAlpha([b'q', b'j', b'p']),
			ThreeLowerCaseAlpha([b'q', b'j', b'q']),
			ThreeLowerCaseAlpha([b'q', b'j', b'r']),
			ThreeLowerCaseAlpha([b'q', b'j', b's']),
			ThreeLowerCaseAlpha([b'q', b'j', b't']),
			ThreeLowerCaseAlpha([b'q', b'j', b'u']),
			ThreeLowerCaseAlpha([b'q', b'j', b'v']),
			ThreeLowerCaseAlpha([b'q', b'j', b'w']),
			ThreeLowerCaseAlpha([b'q', b'j', b'x']),
			ThreeLowerCaseAlpha([b'q', b'j', b'y']),
			ThreeLowerCaseAlpha([b'q', b'j', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'k', b'a']),
			ThreeLowerCaseAlpha([b'q', b'k', b'b']),
			ThreeLowerCaseAlpha([b'q', b'k', b'c']),
			ThreeLowerCaseAlpha([b'q', b'k', b'd']),
			ThreeLowerCaseAlpha([b'q', b'k', b'e']),
			ThreeLowerCaseAlpha([b'q', b'k', b'f']),
			ThreeLowerCaseAlpha([b'q', b'k', b'g']),
			ThreeLowerCaseAlpha([b'q', b'k', b'h']),
			ThreeLowerCaseAlpha([b'q', b'k', b'i']),
			ThreeLowerCaseAlpha([b'q', b'k', b'j']),
			ThreeLowerCaseAlpha([b'q', b'k', b'k']),
			ThreeLowerCaseAlpha([b'q', b'k', b'l']),
			ThreeLowerCaseAlpha([b'q', b'k', b'm']),
			ThreeLowerCaseAlpha([b'q', b'k', b'n']),
			ThreeLowerCaseAlpha([b'q', b'k', b'o']),
			ThreeLowerCaseAlpha([b'q', b'k', b'p']),
			ThreeLowerCaseAlpha([b'q', b'k', b'q']),
			ThreeLowerCaseAlpha([b'q', b'k', b'r']),
			ThreeLowerCaseAlpha([b'q', b'k', b's']),
			ThreeLowerCaseAlpha([b'q', b'k', b't']),
			ThreeLowerCaseAlpha([b'q', b'k', b'u']),
			ThreeLowerCaseAlpha([b'q', b'k', b'v']),
			ThreeLowerCaseAlpha([b'q', b'k', b'w']),
			ThreeLowerCaseAlpha([b'q', b'k', b'x']),
			ThreeLowerCaseAlpha([b'q', b'k', b'y']),
			ThreeLowerCaseAlpha([b'q', b'k', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'l', b'a']),
			ThreeLowerCaseAlpha([b'q', b'l', b'b']),
			ThreeLowerCaseAlpha([b'q', b'l', b'c']),
			ThreeLowerCaseAlpha([b'q', b'l', b'd']),
			ThreeLowerCaseAlpha([b'q', b'l', b'e']),
			ThreeLowerCaseAlpha([b'q', b'l', b'f']),
			ThreeLowerCaseAlpha([b'q', b'l', b'g']),
			ThreeLowerCaseAlpha([b'q', b'l', b'h']),
			ThreeLowerCaseAlpha([b'q', b'l', b'i']),
			ThreeLowerCaseAlpha([b'q', b'l', b'j']),
			ThreeLowerCaseAlpha([b'q', b'l', b'k']),
			ThreeLowerCaseAlpha([b'q', b'l', b'l']),
			ThreeLowerCaseAlpha([b'q', b'l', b'm']),
			ThreeLowerCaseAlpha([b'q', b'l', b'n']),
			ThreeLowerCaseAlpha([b'q', b'l', b'o']),
			ThreeLowerCaseAlpha([b'q', b'l', b'p']),
			ThreeLowerCaseAlpha([b'q', b'l', b'q']),
			ThreeLowerCaseAlpha([b'q', b'l', b'r']),
			ThreeLowerCaseAlpha([b'q', b'l', b's']),
			ThreeLowerCaseAlpha([b'q', b'l', b't']),
			ThreeLowerCaseAlpha([b'q', b'l', b'u']),
			ThreeLowerCaseAlpha([b'q', b'l', b'v']),
			ThreeLowerCaseAlpha([b'q', b'l', b'w']),
			ThreeLowerCaseAlpha([b'q', b'l', b'x']),
			ThreeLowerCaseAlpha([b'q', b'l', b'y']),
			ThreeLowerCaseAlpha([b'q', b'l', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'm', b'a']),
			ThreeLowerCaseAlpha([b'q', b'm', b'b']),
			ThreeLowerCaseAlpha([b'q', b'm', b'c']),
			ThreeLowerCaseAlpha([b'q', b'm', b'd']),
			ThreeLowerCaseAlpha([b'q', b'm', b'e']),
			ThreeLowerCaseAlpha([b'q', b'm', b'f']),
			ThreeLowerCaseAlpha([b'q', b'm', b'g']),
			ThreeLowerCaseAlpha([b'q', b'm', b'h']),
			ThreeLowerCaseAlpha([b'q', b'm', b'i']),
			ThreeLowerCaseAlpha([b'q', b'm', b'j']),
			ThreeLowerCaseAlpha([b'q', b'm', b'k']),
			ThreeLowerCaseAlpha([b'q', b'm', b'l']),
			ThreeLowerCaseAlpha([b'q', b'm', b'm']),
			ThreeLowerCaseAlpha([b'q', b'm', b'n']),
			ThreeLowerCaseAlpha([b'q', b'm', b'o']),
			ThreeLowerCaseAlpha([b'q', b'm', b'p']),
			ThreeLowerCaseAlpha([b'q', b'm', b'q']),
			ThreeLowerCaseAlpha([b'q', b'm', b'r']),
			ThreeLowerCaseAlpha([b'q', b'm', b's']),
			ThreeLowerCaseAlpha([b'q', b'm', b't']),
			ThreeLowerCaseAlpha([b'q', b'm', b'u']),
			ThreeLowerCaseAlpha([b'q', b'm', b'v']),
			ThreeLowerCaseAlpha([b'q', b'm', b'w']),
			ThreeLowerCaseAlpha([b'q', b'm', b'x']),
			ThreeLowerCaseAlpha([b'q', b'm', b'y']),
			ThreeLowerCaseAlpha([b'q', b'm', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'n', b'a']),
			ThreeLowerCaseAlpha([b'q', b'n', b'b']),
			ThreeLowerCaseAlpha([b'q', b'n', b'c']),
			ThreeLowerCaseAlpha([b'q', b'n', b'd']),
			ThreeLowerCaseAlpha([b'q', b'n', b'e']),
			ThreeLowerCaseAlpha([b'q', b'n', b'f']),
			ThreeLowerCaseAlpha([b'q', b'n', b'g']),
			ThreeLowerCaseAlpha([b'q', b'n', b'h']),
			ThreeLowerCaseAlpha([b'q', b'n', b'i']),
			ThreeLowerCaseAlpha([b'q', b'n', b'j']),
			ThreeLowerCaseAlpha([b'q', b'n', b'k']),
			ThreeLowerCaseAlpha([b'q', b'n', b'l']),
			ThreeLowerCaseAlpha([b'q', b'n', b'm']),
			ThreeLowerCaseAlpha([b'q', b'n', b'n']),
			ThreeLowerCaseAlpha([b'q', b'n', b'o']),
			ThreeLowerCaseAlpha([b'q', b'n', b'p']),
			ThreeLowerCaseAlpha([b'q', b'n', b'q']),
			ThreeLowerCaseAlpha([b'q', b'n', b'r']),
			ThreeLowerCaseAlpha([b'q', b'n', b's']),
			ThreeLowerCaseAlpha([b'q', b'n', b't']),
			ThreeLowerCaseAlpha([b'q', b'n', b'u']),
			ThreeLowerCaseAlpha([b'q', b'n', b'v']),
			ThreeLowerCaseAlpha([b'q', b'n', b'w']),
			ThreeLowerCaseAlpha([b'q', b'n', b'x']),
			ThreeLowerCaseAlpha([b'q', b'n', b'y']),
			ThreeLowerCaseAlpha([b'q', b'n', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'o', b'a']),
			ThreeLowerCaseAlpha([b'q', b'o', b'b']),
			ThreeLowerCaseAlpha([b'q', b'o', b'c']),
			ThreeLowerCaseAlpha([b'q', b'o', b'd']),
			ThreeLowerCaseAlpha([b'q', b'o', b'e']),
			ThreeLowerCaseAlpha([b'q', b'o', b'f']),
			ThreeLowerCaseAlpha([b'q', b'o', b'g']),
			ThreeLowerCaseAlpha([b'q', b'o', b'h']),
			ThreeLowerCaseAlpha([b'q', b'o', b'i']),
			ThreeLowerCaseAlpha([b'q', b'o', b'j']),
			ThreeLowerCaseAlpha([b'q', b'o', b'k']),
			ThreeLowerCaseAlpha([b'q', b'o', b'l']),
			ThreeLowerCaseAlpha([b'q', b'o', b'm']),
			ThreeLowerCaseAlpha([b'q', b'o', b'n']),
			ThreeLowerCaseAlpha([b'q', b'o', b'o']),
			ThreeLowerCaseAlpha([b'q', b'o', b'p']),
			ThreeLowerCaseAlpha([b'q', b'o', b'q']),
			ThreeLowerCaseAlpha([b'q', b'o', b'r']),
			ThreeLowerCaseAlpha([b'q', b'o', b's']),
			ThreeLowerCaseAlpha([b'q', b'o', b't']),
			ThreeLowerCaseAlpha([b'q', b'o', b'u']),
			ThreeLowerCaseAlpha([b'q', b'o', b'v']),
			ThreeLowerCaseAlpha([b'q', b'o', b'w']),
			ThreeLowerCaseAlpha([b'q', b'o', b'x']),
			ThreeLowerCaseAlpha([b'q', b'o', b'y']),
			ThreeLowerCaseAlpha([b'q', b'o', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'p', b'a']),
			ThreeLowerCaseAlpha([b'q', b'p', b'b']),
			ThreeLowerCaseAlpha([b'q', b'p', b'c']),
			ThreeLowerCaseAlpha([b'q', b'p', b'd']),
			ThreeLowerCaseAlpha([b'q', b'p', b'e']),
			ThreeLowerCaseAlpha([b'q', b'p', b'f']),
			ThreeLowerCaseAlpha([b'q', b'p', b'g']),
			ThreeLowerCaseAlpha([b'q', b'p', b'h']),
			ThreeLowerCaseAlpha([b'q', b'p', b'i']),
			ThreeLowerCaseAlpha([b'q', b'p', b'j']),
			ThreeLowerCaseAlpha([b'q', b'p', b'k']),
			ThreeLowerCaseAlpha([b'q', b'p', b'l']),
			ThreeLowerCaseAlpha([b'q', b'p', b'm']),
			ThreeLowerCaseAlpha([b'q', b'p', b'n']),
			ThreeLowerCaseAlpha([b'q', b'p', b'o']),
			ThreeLowerCaseAlpha([b'q', b'p', b'p']),
			ThreeLowerCaseAlpha([b'q', b'p', b'q']),
			ThreeLowerCaseAlpha([b'q', b'p', b'r']),
			ThreeLowerCaseAlpha([b'q', b'p', b's']),
			ThreeLowerCaseAlpha([b'q', b'p', b't']),
			ThreeLowerCaseAlpha([b'q', b'p', b'u']),
			ThreeLowerCaseAlpha([b'q', b'p', b'v']),
			ThreeLowerCaseAlpha([b'q', b'p', b'w']),
			ThreeLowerCaseAlpha([b'q', b'p', b'x']),
			ThreeLowerCaseAlpha([b'q', b'p', b'y']),
			ThreeLowerCaseAlpha([b'q', b'p', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'q', b'a']),
			ThreeLowerCaseAlpha([b'q', b'q', b'b']),
			ThreeLowerCaseAlpha([b'q', b'q', b'c']),
			ThreeLowerCaseAlpha([b'q', b'q', b'd']),
			ThreeLowerCaseAlpha([b'q', b'q', b'e']),
			ThreeLowerCaseAlpha([b'q', b'q', b'f']),
			ThreeLowerCaseAlpha([b'q', b'q', b'g']),
			ThreeLowerCaseAlpha([b'q', b'q', b'h']),
			ThreeLowerCaseAlpha([b'q', b'q', b'i']),
			ThreeLowerCaseAlpha([b'q', b'q', b'j']),
			ThreeLowerCaseAlpha([b'q', b'q', b'k']),
			ThreeLowerCaseAlpha([b'q', b'q', b'l']),
			ThreeLowerCaseAlpha([b'q', b'q', b'm']),
			ThreeLowerCaseAlpha([b'q', b'q', b'n']),
			ThreeLowerCaseAlpha([b'q', b'q', b'o']),
			ThreeLowerCaseAlpha([b'q', b'q', b'p']),
			ThreeLowerCaseAlpha([b'q', b'q', b'q']),
			ThreeLowerCaseAlpha([b'q', b'q', b'r']),
			ThreeLowerCaseAlpha([b'q', b'q', b's']),
			ThreeLowerCaseAlpha([b'q', b'q', b't']),
			ThreeLowerCaseAlpha([b'q', b'q', b'u']),
			ThreeLowerCaseAlpha([b'q', b'q', b'v']),
			ThreeLowerCaseAlpha([b'q', b'q', b'w']),
			ThreeLowerCaseAlpha([b'q', b'q', b'x']),
			ThreeLowerCaseAlpha([b'q', b'q', b'y']),
			ThreeLowerCaseAlpha([b'q', b'q', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b'r', b'a']),
			ThreeLowerCaseAlpha([b'q', b'r', b'b']),
			ThreeLowerCaseAlpha([b'q', b'r', b'c']),
			ThreeLowerCaseAlpha([b'q', b'r', b'd']),
			ThreeLowerCaseAlpha([b'q', b'r', b'e']),
			ThreeLowerCaseAlpha([b'q', b'r', b'f']),
			ThreeLowerCaseAlpha([b'q', b'r', b'g']),
			ThreeLowerCaseAlpha([b'q', b'r', b'h']),
			ThreeLowerCaseAlpha([b'q', b'r', b'i']),
			ThreeLowerCaseAlpha([b'q', b'r', b'j']),
			ThreeLowerCaseAlpha([b'q', b'r', b'k']),
			ThreeLowerCaseAlpha([b'q', b'r', b'l']),
			ThreeLowerCaseAlpha([b'q', b'r', b'm']),
			ThreeLowerCaseAlpha([b'q', b'r', b'n']),
			ThreeLowerCaseAlpha([b'q', b'r', b'o']),
			ThreeLowerCaseAlpha([b'q', b'r', b'p']),
			ThreeLowerCaseAlpha([b'q', b'r', b'q']),
			ThreeLowerCaseAlpha([b'q', b'r', b'r']),
			ThreeLowerCaseAlpha([b'q', b'r', b's']),
			ThreeLowerCaseAlpha([b'q', b'r', b't']),
			ThreeLowerCaseAlpha([b'q', b'r', b'u']),
			ThreeLowerCaseAlpha([b'q', b'r', b'v']),
			ThreeLowerCaseAlpha([b'q', b'r', b'w']),
			ThreeLowerCaseAlpha([b'q', b'r', b'x']),
			ThreeLowerCaseAlpha([b'q', b'r', b'y']),
			ThreeLowerCaseAlpha([b'q', b'r', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b's', b'a']),
			ThreeLowerCaseAlpha([b'q', b's', b'b']),
			ThreeLowerCaseAlpha([b'q', b's', b'c']),
			ThreeLowerCaseAlpha([b'q', b's', b'd']),
			ThreeLowerCaseAlpha([b'q', b's', b'e']),
			ThreeLowerCaseAlpha([b'q', b's', b'f']),
			ThreeLowerCaseAlpha([b'q', b's', b'g']),
			ThreeLowerCaseAlpha([b'q', b's', b'h']),
			ThreeLowerCaseAlpha([b'q', b's', b'i']),
			ThreeLowerCaseAlpha([b'q', b's', b'j']),
			ThreeLowerCaseAlpha([b'q', b's', b'k']),
			ThreeLowerCaseAlpha([b'q', b's', b'l']),
			ThreeLowerCaseAlpha([b'q', b's', b'm']),
			ThreeLowerCaseAlpha([b'q', b's', b'n']),
			ThreeLowerCaseAlpha([b'q', b's', b'o']),
			ThreeLowerCaseAlpha([b'q', b's', b'p']),
			ThreeLowerCaseAlpha([b'q', b's', b'q']),
			ThreeLowerCaseAlpha([b'q', b's', b'r']),
			ThreeLowerCaseAlpha([b'q', b's', b's']),
			ThreeLowerCaseAlpha([b'q', b's', b't']),
			ThreeLowerCaseAlpha([b'q', b's', b'u']),
			ThreeLowerCaseAlpha([b'q', b's', b'v']),
			ThreeLowerCaseAlpha([b'q', b's', b'w']),
			ThreeLowerCaseAlpha([b'q', b's', b'x']),
			ThreeLowerCaseAlpha([b'q', b's', b'y']),
			ThreeLowerCaseAlpha([b'q', b's', b'z']),
			
			ThreeLowerCaseAlpha([b'q', b't', b'a']),
			ThreeLowerCaseAlpha([b'q', b't', b'b']),
			ThreeLowerCaseAlpha([b'q', b't', b'c']),
			ThreeLowerCaseAlpha([b'q', b't', b'd']),
			ThreeLowerCaseAlpha([b'q', b't', b'e']),
			ThreeLowerCaseAlpha([b'q', b't', b'f']),
			ThreeLowerCaseAlpha([b'q', b't', b'g']),
			ThreeLowerCaseAlpha([b'q', b't', b'h']),
			ThreeLowerCaseAlpha([b'q', b't', b'i']),
			ThreeLowerCaseAlpha([b'q', b't', b'j']),
			ThreeLowerCaseAlpha([b'q', b't', b'k']),
			ThreeLowerCaseAlpha([b'q', b't', b'l']),
			ThreeLowerCaseAlpha([b'q', b't', b'm']),
			ThreeLowerCaseAlpha([b'q', b't', b'n']),
			ThreeLowerCaseAlpha([b'q', b't', b'o']),
			ThreeLowerCaseAlpha([b'q', b't', b'p']),
			ThreeLowerCaseAlpha([b'q', b't', b'q']),
			ThreeLowerCaseAlpha([b'q', b't', b'r']),
			ThreeLowerCaseAlpha([b'q', b't', b's']),
			ThreeLowerCaseAlpha([b'q', b't', b't']),
			ThreeLowerCaseAlpha([b'q', b't', b'u']),
			ThreeLowerCaseAlpha([b'q', b't', b'v']),
			ThreeLowerCaseAlpha([b'q', b't', b'w']),
			ThreeLowerCaseAlpha([b'q', b't', b'x']),
			ThreeLowerCaseAlpha([b'q', b't', b'y']),
			ThreeLowerCaseAlpha([b'q', b't', b'z']),
		];
		
		match (inclusive_from, inclusive_to)
		{
			("qaa", "qtz") => Ok(&PrivateUseRange),
			
			_ => Err(TagOrSubtagRangeError::TypeDoesNotSupportSpecificRange { inclusive_from: inclusive_from.to_string(), inclusive_to: inclusive_from.to_string() }),
		}
	}
	
	#[inline(always)]
	fn parse_key(subtag: String) -> Result<Self::Key, KeyParseError>
	{
		use LanguageSubtag::*;
		
		match subtag.len()
		{
			2 => Ok(TwoLowerCaseAlpha(Self::subtag_to_byte_array::<_, 2>(&subtag, Self::validate_is_lower_case_alpha)?)),
			
			3 => Ok(ThreeLowerCaseAlpha(Self::subtag_to_byte_array::<_, 3>(&subtag, Self::validate_is_lower_case_alpha)?)),
			
			length @ _ => Err(KeyParseError::SubtagInvalidLength { length, minimum: 2, maximum: 3, subtag: subtag.to_string() }),
		}
	}
	
	#[inline(always)]
	fn parse(preferred_value: Option<String>, prefix: Vec<String>, suppress_script: Option<String>, macrolanguage: Option<String>, scope: Option<Scope>) -> Result<Self, RecordParseError>
	{
		if !prefix.is_empty()
		{
			Err(FieldNotPermittedError::PrefixNotPermittedInThisRecordType)?
		}
		
		Ok
		(
			Self
			{
				primary_language_subtag: preferred_value,
				
				suppress_script: match suppress_script
				{
					None => None,
					
					Some(suppress_script) => Some(ScriptRecord::parse_key(suppress_script)?),
				},
				
				macrolanguage,
				
				scope: scope.unwrap_or_default(),
			}
		)
	}
}
